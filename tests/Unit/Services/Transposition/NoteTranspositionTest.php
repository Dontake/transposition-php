<?php

declare(strict_types=1);

namespace Dondake\Tests\Unit\Services\Transposition;

use Dondake\MusicTransposition\Mappers\NoteMapper;
use Dondake\MusicTransposition\Services\Transposition\NoteTranspositionService;
use PHPUnit\Framework\TestCase;

final class NoteTranspositionTest extends TestCase
{
    public function testRun()
    {
        $input = [[2, 1], [2, 6], [2, 1], [2, 8], [2, 1], [2, 9], [2, 1], [2, 6], [2, 1], [2, 8], [2, 1], [2, 9], [2, 1], [2, 11], [2, 1], [2, 8], [2, 1], [2, 9], [2, 1], [2,
            11], [2, 1], [3, 1], [2, 1], [2, 9], [2, 1], [2, 11], [2, 1], [3, 1], [2, 1], [3, 2], [2, 1], [2, 11], [2, 1], [3, 1], [2, 1], [2, 9], [2, 1], [2, 11], [2,
            1], [2, 8], [2, 1], [2, 9], [2, 1], [2, 6], [2, 1], [2, 8], [2, 1], [2, 5], [2, 1], [2, 6], [2, 1], [2, 1], [2, 1], [2, 2], [2, 1], [1, 11], [2, 1], [2, 1], [
            2, 1], [1, 9], [2, 1], [1, 11], [2, 1], [1, 8], [2, 1], [1, 9], [2, 1], [1, 6], [2, 1], [1, 11], [2, 1], [1, 8], [2, 1], [1, 9], [2, 1], [1, 6], [2, 1], [1,
            8], [2, 1], [1, 5], [2, 1], [1, 6]];

        $output = [[1, 10], [2, 3], [1, 10], [2, 5], [1, 10], [2, 6], [1, 10], [2, 3], [1, 10], [2, 5], [1, 10], [2, 6], [1, 10], [2, 8], [1, 10], [2, 5], [1, 10], [2,
            6], [1, 10], [2, 8], [1, 10], [2, 10], [1, 10], [2, 6], [1, 10], [2, 8], [1, 10], [2, 10], [1, 10], [2, 11], [1, 10], [2, 8], [1, 10], [2, 10], [1,
            10], [2, 6], [1, 10], [2, 8], [1, 10], [2, 5], [1, 10], [2, 6], [1, 10], [2, 3], [1, 10], [2, 5], [1, 10], [2, 2], [1, 10], [2, 3], [1, 10], [1, 10],
            [1, 10], [1, 11], [1, 10], [1, 8], [1, 10], [1, 10], [1, 10], [1, 6], [1, 10], [1, 8], [1, 10], [1, 5], [1, 10], [1, 6], [1, 10], [1, 3], [1, 10], [1
                , 8], [1, 10], [1, 5], [1, 10], [1, 6], [1, 10], [1, 3], [1, 10], [1, 5], [1, 10], [1, 2], [1, 10], [1, 3]];

        $service = new NoteTranspositionService();

        $this->assertEquals($service->run(NoteMapper::map($input), -3), $output);
    }
}